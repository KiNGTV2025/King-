name:  Güncelleme Raporu

on:
  schedule:
    - cron: "0 3,9,15,21 * * *"
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      M3U_URL: ${{ secrets.M3U_URL }}

    steps:
      - name: Repo'yu al
        uses: actions/checkout@v4

      - name: Önceki verileri yükle
        run: |
          mkdir -p .data
          [ -f .data/old_counts.txt ] || touch .data/old_counts.txt
          [ -f .data/old_message_ids.txt ] || touch .data/old_message_ids.txt

      - name: Eski mesajları sil (20sn bekleme ile)
        run: |
          if [ -s .data/old_message_ids.txt ]; then
            echo "⏳ 20 saniye bekleniyor..."
            sleep 20
            while IFS= read -r MSG_ID; do
              [ -n "$MSG_ID" ] && {
                echo "[Silme] Mesaj ID: $MSG_ID"
                RESPONSE=$(curl -s -X POST \
                  "https://api.telegram.org/bot${BOT_TOKEN}/deleteMessage" \
                  -d "chat_id=${CHAT_ID}" \
                  -d "message_id=${MSG_ID}")
                echo "Telegram cevabı: $RESPONSE"
              }
            done < .data/old_message_ids.txt
            > .data/old_message_ids.txt

            # Git commit + conflict çözme
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add .data/old_message_ids.txt
            git commit -m "Eski mesaj ID'leri temizlendi [skip ci]" || echo "Commit yok"
            git fetch origin main
            git checkout main
            git pull --rebase origin main || {
                echo "⚠️ Rebase sırasında çakışma oldu. old_message_ids.txt bizden alınacak."
                git checkout --ours .data/old_message_ids.txt
                git add .data/old_message_ids.txt
                git rebase --continue || echo "✅ Çakışma çözüldü"
            }
            git push || echo "Push başarısız"
          fi

      - name: M3U dosyasını indir
        run: curl -s -L "$M3U_URL" -o playlist.m3u

      - name: Kategori analizi yap
        run: |
          grep -oP 'group-title="\K[^"]+' playlist.m3u \
          | tr -d '\r' \
          | sed 's/[[:space:]]\+/ /g' \
          | sed -E 's/([Bb][Ee][Ii][Nn])/Morpaket/g' \
          | sort \
          | uniq -c \
          | awk '{$1=$1; count=$1; $1=""; name=substr($0,2); print count "|" name}' > new_counts.txt

      - name: Rapor oluştur
        run: |
          if [ -s .data/old_counts.txt ]; then
            sed -i -E 's/([Bb][Ee][Ii][Nn])/Morpaket/g' .data/old_counts.txt
          fi

          NEW_TOTAL=$(awk -F"|" '{sum += $1} END {print sum}' new_counts.txt)
          OLD_TOTAL=$(awk -F"|" '{sum += $1} END {print sum}' .data/old_counts.txt)
          CHANGE=$((NEW_TOTAL - OLD_TOTAL))
          PERCENT="0"
          if [ "$OLD_TOTAL" -gt 0 ]; then
            PERCENT=$(awk "BEGIN {printf \"%.2f\", ($CHANGE/$OLD_TOTAL)*100}")
          fi

          MESSAGE="<b>📊 ÜMİT TV KANAL GÜNCELLEME RAPORU</b>\n\n"
          MESSAGE+="<b>🕒 Son Güncelleme (TSİ):</b> <code>$(TZ='Europe/Istanbul' date '+%d.%m.%Y %H:%M:%S')</code>\n"
          MESSAGE+="<b>🔢 Toplam Kanal:</b> <b>${NEW_TOTAL}</b>"
          if [ "$CHANGE" -gt 0 ]; then
            MESSAGE+=" (<code>↑+${CHANGE}</code> | %${PERCENT})\n\n"
          elif [ "$CHANGE" -lt 0 ]; then
            MESSAGE+=" (<code>↓${CHANGE}</code> | %${PERCENT})\n\n"
          else
            MESSAGE+=" (<code>→ Değişiklik yok</code>)\n\n"
          fi

          MESSAGE+="<b>📋 KATEGORİ DEĞİŞİKLİKLERİ</b>\n"

          TEMP_NEW=$(mktemp)
          TEMP_REMOVED=$(mktemp)
          TEMP_CHANGED=$(mktemp)
          TEMP_UNCHANGED=$(mktemp)

          comm -23 <(cut -d"|" -f2 new_counts.txt | sort) <(cut -d"|" -f2 .data/old_counts.txt | sort) > new_categories.txt
          while read -r CATEGORY; do
            [ -n "$CATEGORY" ] || continue
            COUNT=$(grep -F "|${CATEGORY}" new_counts.txt | cut -d"|" -f1)
            echo "🆕 <b>${CATEGORY}</b>: ${COUNT} kanal (yeni kategori)" >> "$TEMP_NEW"
          done < new_categories.txt

          comm -13 <(cut -d"|" -f2 new_counts.txt | sort) <(cut -d"|" -f2 .data/old_counts.txt | sort) > removed_categories.txt
          while read -r CATEGORY; do
            [ -n "$CATEGORY" ] || continue
            OLD_COUNT=$(grep -F "|${CATEGORY}" .data/old_counts.txt | cut -d"|" -f1)
            echo "❌ <b>${CATEGORY}</b>: 0 kanal (kaldırıldı, önceki: ${OLD_COUNT})" >> "$TEMP_REMOVED"
          done < removed_categories.txt

          while IFS="|" read -r COUNT CATEGORY; do
            OLD_COUNT=$(grep -F "|${CATEGORY}" .data/old_counts.txt | cut -d"|" -f1)
            if [ -n "$OLD_COUNT" ] && [ "$OLD_COUNT" -ne "$COUNT" ]; then
              if [ "$COUNT" -gt "$OLD_COUNT" ]; then
                echo "⬆️ <b>${CATEGORY}</b>: ${COUNT} kanal (<code>↑+$((COUNT - OLD_COUNT))</code>)" >> "$TEMP_CHANGED"
              else
                echo "⬇️ <b>${CATEGORY}</b>: ${COUNT} kanal (<code>↓-$((OLD_COUNT - COUNT))</code>)" >> "$TEMP_CHANGED"
              fi
            elif [ -n "$OLD_COUNT" ]; then
              echo "⏺️ <b>${CATEGORY}</b>: ${COUNT} kanal (değişmedi)" >> "$TEMP_UNCHANGED"
            fi
          done < new_counts.txt

          if [ -s "$TEMP_NEW" ]; then
            MESSAGE+="\n<b>🌟 YENİ KATEGORİLER</b>\n$(cat "$TEMP_NEW")\n"
          fi
          if [ -s "$TEMP_REMOVED" ]; then
            MESSAGE+="\n<b>🗑️ KALDIRILAN KATEGORİLER</b>\n$(cat "$TEMP_REMOVED")\n"
          fi
          if [ -s "$TEMP_CHANGED" ]; then
            MESSAGE+="\n<b>🔄 DEĞİŞEN KATEGORİLER</b>\n$(cat "$TEMP_CHANGED")\n"
          fi
          if [ -s "$TEMP_UNCHANGED" ]; then
            MESSAGE+="\n<b>⚖️ DEĞİŞMEYEN KATEGORİLER</b>\n$(cat "$TEMP_UNCHANGED")\n"
          fi

          MESSAGE+="\n<b>📌 AÇIKLAMALAR</b>\n"
          MESSAGE+="🆕 Yeni kategori\n⬆️ Artış\n⬇️ Azalış\n⏺️ Sabit\n❌ Kaldırılan\n\n"
          MESSAGE+="<i>ℹ️ Otomatik güncelleme raporu - ÜMİT TV</i>"

          echo -e "$MESSAGE" > message.txt

      - name: jq kur
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Mesajı gönder ve ID’yi kaydet
        run: |
          TEXT=$(cat message.txt)
          MAX=4000
          START=0
          > .data/old_message_ids.txt
          while [ $START -lt ${#TEXT} ]; do
            PART=$(echo "$TEXT" | cut -c$((START+1))-$((START+MAX)))
            RESPONSE=$(curl -s --data-urlencode "text=$PART" \
              -d "chat_id=${CHAT_ID}" \
              -d "parse_mode=HTML" \
              "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage")
            MSG_ID=$(echo "$RESPONSE" | jq -r '.result.message_id')
            if [ "$MSG_ID" != "null" ]; then
              echo "$MSG_ID" >> .data/old_message_ids.txt
            fi
            START=$((START+MAX))
          done

      - name: Verileri güncelle
        run: mv new_counts.txt .data/old_counts.txt

      - name: Değişiklikleri commit et
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .data
          git commit -m "Veriler güncellendi [skip ci]" || echo "Commit yok"
          git fetch origin main
          git checkout main
          git pull --rebase origin main || {
              echo "⚠️ Rebase sırasında çakışma oldu. old_message_ids.txt bizden alınacak."
              git checkout --ours .data/old_message_ids.txt
              git add .data/old_message_ids.txt
              git rebase --continue || echo "✅ Çakışma çözüldü"
          }
          git push || echo "Push başarısız"
